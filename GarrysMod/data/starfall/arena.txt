--@name arena
--@author scripture
--@shared
-- PvP arena
-- type !joinarena to join !leavearena to leave
-- spawns a chair on you which acts as your respawn point
-- respawn points are marked by nocollided skulls, "models/gibs/hgibs.mdl"
--
-- Bugs:
-- To do:
-- add weapon blacklist
-- add hud
-- put prop spawns later (like hl2dm)
-- clean up code
local ArenaPlayers = {}
local function GivePlayerTable()
    net.start("GivePlayerTable")
    net.writeTable(ArenaPlayers)
    net.send(table.getKeys(ArenaPlayers))
end

if SERVER then
    local function GiveChair(player)
        local Chair = prop.createSeat(player:getPos(), Angle(0, 0, 0), "models/nova/chair_office02.mdl", true)
        local HUD = nil
        if not ArenaPlayers[player] then
            HUD = prop.createComponent(player:getShootPos(), Angle(0, 0, 0), "starfall_hud", "models/blacknecro/tv_plasma_4_3.mdl", true)
            HUD:setColor(Color(0, 0, 0, 0))
            HUD:linkComponent(chip())
        end

        ArenaPlayers[player] = {
            Chair = Chair,
            HUD = HUD,
            Score = 0
        }

        printTable(ArenaPlayers)
        timer.simple(6, function()
            -- autoremove player from table if they dont enter chair within 6 seconds
            if ArenaPlayers[player] and ArenaPlayers[player].Chair and Chair:isValid() then
                Chair:remove()
                if player:isHUDActive() then
                    printHud(player, Color(255, 0, 0), "You were autoremoved from the arena.")
                    printHud(player, Color(255, 0, 0), "Type !joinarena to rejoin.")
                    enableHud(player, false)
                end

                ArenaPlayers[player].HUD:remove()
                ArenaPlayers[player] = false
                printTable(ArenaPlayers)
                GivePlayerTable()
                ArenaPlayers[player] = nil
            end
        end)
    end

    hook.add("HUDConnected", "MoveHUD", function(ent, ply) if isValid(ent) and ArenaPlayers[ply].HUD then ArenaPlayers[ply].HUD:setPos(Vector(0, 0, 0)) end end)
    hook.add("PlayerSay", "ReceiveText", function(ply, text, teamChat)
        if text == "!joinarena" and ArenaPlayers[ply] == nil then
            GiveChair(ply)
            GivePlayerTable()
        elseif text == "!leavearena" and ArenaPlayers[ply] then
            if isValid(ArenaPlayers[ply].Chair) and isValid(ArenaPlayers[ply].HUD) then
                ArenaPlayers[ply].Chair:remove()
                ArenaPlayers[ply].HUD:remove()
            end

            prop.create(ply:getShootPos(), Angle(0, 0, 0), "models/props_c17/oildrum001_explosive.mdl", true):breakEnt() -- make leaving the arena not require killbind and prevent people from sticking around
            prop.create(ply:getShootPos(), Angle(0, 0, 0), "models/props_c17/oildrum001_explosive.mdl", true):breakEnt()
            ArenaPlayers[ply].HUD:remove()
            enableHud(ply, false)
            ArenaPlayers[ply] = false
            GivePlayerTable()
            ArenaPlayers[ply] = nil
        end
    end)

    local Spawns = {} -- spawns are marked by nocollided skulls
    hook.add("PlayerEnteredVehicle", "ChairLogic", function(ply, vehicle, num)
        if ArenaPlayers[ply] and ArenaPlayers[ply].Chair == vehicle and Spawns[1] then
            vehicle:setPos(Spawns[math.random(1, #Spawns)]:getPos())
            vehicle:remove()
        end
    end)

    hook.add("PlayerSpawn", "GiveChairOnDeath", function(ply) if ArenaPlayers[ply] then GiveChair(ply) end end)
    hook.add("PlayerDisconnected", "UpdatePlayerTableAgain", function(ply)
        if ArenaPlayers[ply] then
            ArenaPlayers[ply] = nil
            ArenaPlayers[ply].Chair:remove()
        end
    end)

    local LookupBounds = Vector(-4000, -4000, -4000)
    local function RegisterSpawns()
        for index, ent in ipairs(find.inBox(chip():getPos() - LookupBounds, chip():getPos() + LookupBounds)) do -- get starfall chip pos and then search in box around it for skull
            if ent:getModel() == "models/gibs/hgibs.mdl" and ent:getCollisionGroup() == 20 then Spawns[#Spawns + 1] = ent end
        end
    end

    RegisterSpawns()
    hook.add("PlayerDeath", "CountScore", function(ply, inflictor, attacker)
        if ArenaPlayers[attacker] and ply ~= attacker then
            --
            ArenaPlayers[attacker].Score = ArenaPlayers[attacker].Score + 1
            GivePlayerTable()
        end
    end)
end

if CLIENT then
    local BigVerdana = render.createFont("Verdana", 72)
    local PlayerTable = nil
    net.receive("GivePlayerTable", function()
        PlayerTable = net.readTable()
        for _, ply in pairs(PlayerTable) do
            if PlayerTable[ply] == false then PlayerTable[ply] = nil end
        end
    end)

    local Green = Color(0, 255, 0)
    local Red = Color(255, 0, 0)
    hook.add("DrawHUD", "ArenaHUD", function()
        local b = 1 -- make the table better later so that you dont have to use b
        for ply, score in pairs(PlayerTable) do
            if ply then
                render.setFont(BigVerdana)
                if ply:isValid() and ply:isAlive() then
                    render.setColor(Green)
                else
                    render.setColor(Red)
                end

                if ply:isValid() and PlayerTable[ply] ~= false then
                    render.drawSimpleText(10, 80 + b * 60, ply:getName() .. ": " .. PlayerTable[ply].Score)
                    b = b + 1
                end

                if b == #PlayerTable then b = 0 end
            end
        end
    end)
end
